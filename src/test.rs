use super::*;

#[test]
fn encode_16() {
    let key = vec![0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07];
    let pt = vec![0x00, 0x01, 0x02, 0x03];
    let ct = vec![0x23, 0xA8, 0xD7, 0x2E];

    let rc5 = RC5::<u16>::new(key, 16).unwrap();
    let res = rc5.encode(&pt).unwrap();
    assert!(ct == res);
}

#[test]
fn encode_32_a() {
    let key = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let pt = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];
    let ct = vec![0x2D, 0xDC, 0x14, 0x9B, 0xCF, 0x08, 0x8B, 0x9E];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let res = rc5.encode(&pt).unwrap();
    assert!(ct == res);
}

#[test]
fn encode_32_b() {
    let key = vec![
        0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF,
        0x48,
    ];
    let pt = vec![0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84];
    let ct = vec![0x11, 0xE4, 0x3B, 0x86, 0xD2, 0x31, 0xEA, 0x64];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let res = rc5.encode(&pt).unwrap();
    assert!(ct == res);
}

#[test]
fn encode_64() {
    let key = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    ];
    let pt = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let ct = vec![
        0xA4, 0x67, 0x72, 0x82, 0x0E, 0xDB, 0xCE, 0x02, 0x35, 0xAB, 0xEA, 0x32, 0xAE, 0x71, 0x78,
        0xDA,
    ];

    let rc5 = RC5::<u64>::new(key, 24).unwrap();
    let res = rc5.encode(&pt).unwrap();
    assert!(ct == res);
}

#[test]
fn encode_4words() {
    let key = vec![
        0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF,
        0x48,
    ];
    let pt = vec![
        0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84, 0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D,
        0x84,
    ];
    let ct = vec![
        0x11, 0xE4, 0x3B, 0x86, 0xD2, 0x31, 0xEA, 0x64, 0x11, 0xE4, 0x3B, 0x86, 0xD2, 0x31, 0xEA,
        0x64,
    ];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let res = rc5.encode(&pt).unwrap();
    assert!(ct == res);
}

#[test]
fn decode_16() {
    let key = vec![0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07];
    let pt = vec![0x00, 0x01, 0x02, 0x03];
    let ct = vec![0x23, 0xA8, 0xD7, 0x2E];

    let rc5 = RC5::<u16>::new(key, 16).unwrap();
    let res = rc5.decode(&ct).unwrap();
    assert!(pt == res);
}

#[test]
fn decode_32_a() {
    let key = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let pt = vec![0x96, 0x95, 0x0D, 0xDA, 0x65, 0x4A, 0x3D, 0x62];
    let ct = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let res = rc5.decode(&ct).unwrap();
    assert!(pt == res);
}

#[test]
fn decode_32_b() {
    let key = vec![
        0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF,
        0x48,
    ];
    let pt = vec![0x63, 0x8B, 0x3A, 0x5E, 0xF7, 0x2B, 0x66, 0x3F];
    let ct = vec![0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let res = rc5.decode(&ct).unwrap();
    assert!(pt == res);
}

#[test]
fn decode_64() {
    let key = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    ];
    let pt = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let ct = vec![
        0xA4, 0x67, 0x72, 0x82, 0x0E, 0xDB, 0xCE, 0x02, 0x35, 0xAB, 0xEA, 0x32, 0xAE, 0x71, 0x78,
        0xDA,
    ];

    let rc5 = RC5::<u64>::new(key, 24).unwrap();
    let res = rc5.decode(&ct).unwrap();
    assert!(pt == res);
}

#[test]
fn decode_4words() {
    let key = vec![
        0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF,
        0x48,
    ];
    let pt = vec![
        0x63, 0x8B, 0x3A, 0x5E, 0xF7, 0x2B, 0x66, 0x3F, 0x63, 0x8B, 0x3A, 0x5E, 0xF7, 0x2B, 0x66,
        0x3F,
    ];
    let ct = vec![
        0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84, 0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D,
        0x84,
    ];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let res = rc5.decode(&ct).unwrap();
    assert!(pt == res);
}

#[test]
fn roundtrip() {
    let key = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let pt = vec![0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let ct = rc5.encode(&pt).unwrap();
    let res = rc5.decode(&ct).unwrap();
    assert!(pt == res);
}

#[test]
fn encode_twice() {
    let key = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let pt = vec![0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let ct1 = rc5.encode(&pt).unwrap();
    let ct2 = rc5.encode(&pt).unwrap();
    assert!(ct1 == ct2);
}

#[test]
fn decode_twice() {
    let key = vec![
        0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF,
        0x48,
    ];
    let pt = vec![0x63, 0x8B, 0x3A, 0x5E, 0xF7, 0x2B, 0x66, 0x3F];
    let ct = vec![0xEA, 0x02, 0x47, 0x14, 0xAD, 0x5C, 0x4D, 0x84];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let res1 = rc5.decode(&ct).unwrap();
    let res2 = rc5.decode(&ct).unwrap();
    assert!(pt == res1);
    assert!(pt == res2);
}

#[test]
fn encode_with_zero_key() {
    let key = vec![0; 16];

    let pt = vec![0; 8];
    let ct = vec![0x21, 0xA5, 0xDB, 0xEE, 0x15, 0x4B, 0x8F, 0x6D];

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    let res = rc5.encode(&pt).unwrap();
    assert!(ct == res);
}

#[test]
fn encode_with_empty_key() {
    let key = Vec::new();
    assert_eq!(RC5::<u32>::new(key, 12).unwrap_err(), Error::EmptyKey);
}

#[test]
fn encode_zero_rounds() {
    let key = vec![
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F,
    ];
    let pt = vec![0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];
    let ct = vec![0x22, 0x0A, 0xB5, 0x63, 0x40, 0xDA, 0x89, 0x14];

    let rc5 = RC5::<u32>::new(key, 0).unwrap();
    let res = rc5.encode(&pt).unwrap();
    assert!(ct == res);
}

#[test]
fn encode_with_too_big_key() {
    let key = vec![0; 257];
    assert_eq!(RC5::<u32>::new(key, 12).unwrap_err(), Error::KeyIsTooBig);
}

#[test]
fn encode_uneven_data() {
    let key = vec![0; 16];
    let pt = vec![0; 7]; // 7 bytes

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    assert_eq!(rc5.encode(&pt).unwrap_err(), Error::InvalidInput);
}

#[test]
fn decode_uneven_data() {
    let key = vec![0; 16];
    let ct = vec![0; 7]; // 7 bytes

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    assert_eq!(rc5.decode(&ct).unwrap_err(), Error::InvalidInput);
}

#[test]
fn encode_3words() {
    let key = vec![0; 16];
    let pt = vec![0; 12]; // 3 words

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    assert_eq!(rc5.encode(&pt).unwrap_err(), Error::InvalidInput);
}

#[test]
fn decode_3words() {
    let key = vec![0; 16];
    let ct = vec![0; 12]; // 3 words

    let rc5 = RC5::<u32>::new(key, 12).unwrap();
    assert_eq!(rc5.decode(&ct).unwrap_err(), Error::InvalidInput);
}
